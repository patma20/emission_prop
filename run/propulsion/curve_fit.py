# Curve fit code for NOx modeling

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Define our function to fit
def cubic_poly(x, a, b, c, d):
    return a * x ** 3 + b * x ** 2 + c * x + d


data = np.array(
    [
        [490.66565865270616, 0.3108499695326671],
        [493.422015351761, 0.3193455904294964],
        [498.42660621238105, 0.3398911452742709],
        [502.89812025012793, 0.3568467042538045],
        [505.5903401782741, 0.3638456152264833],
        [580.655810842946, 0.5185445193279372],
        [582.964871933495, 0.5223788345325973],
        [588.4957413939475, 0.5301261322136274],
        [604.2230664531796, 0.5447294191331802],
        [616.0864738090904, 0.5544398430240609],
        [619.741555594117, 0.5600724577740361],
        [623.1886804230198, 0.5621692358054766],
        [715.495584622804, 0.6680803995927074],
        [718.1285707409013, 0.6758760151056755],
        [728.2613153160737, 0.6960229954563739],
        [729.7127016007893, 0.704410425044895],
        [742.671488094629, 0.7384440201364311],
        [746.3602451178288, 0.7504324298016585],
        [753.1620114747138, 0.7754851939153251],
        [755.4298437459336, 0.7851307284182416],
        [757.3347745108388, 0.79477632641371],
        [772.3094058085254, 0.85959422176463],
        [778.8038375488381, 0.8907299532983604],
        [784.0545378173131, 0.919888844231046],
        [785.2212502289251, 0.9278896041789582],
        [807.8907009167094, 1.0724847718406876],
        [817.4632856471178, 1.142657533773628],
        [827.7604373496022, 1.2279318404265613],
    ]
)

# x = np.array(
#     [
#         490,
#         492,
#         498,
#         503,
#         506,
#         580,
#         582,
#         588,
#         604,
#         616,
#         620,
#         623,
#         716,
#         718,
#         727,
#         728,
#         742,
#         745,
#         772,
#         777,
#         783,
#         785,
#         808,
#         817,
#         827,
#     ]
# )
# y = np.array(
#     [
#         0.32,
#         0.33,
#         0.35,
#         0.37,
#         0.38,
#         0.51,
#         0.515,
#         0.55,
#         0.56,
#         0.565,
#         0.57,
#         0.559,
#         0.635,
#         0.64,
#         0.65,
#         0.68,
#         0.69,
#         0.695,
#         0.85,
#         0.89,
#         0.91,
#         0.92,
#         1.08,
#         1.14,
#         1.22,
#     ]
# )

# Fit the curve to the data
params, covariance = curve_fit(cubic_poly, data[:, 0], data[:, 1])

# Print the result
print("a = %s" % params[0])
print("b = %s" % params[1])
print("c = %s" % params[2])
print("d = %s" % params[3])

xplot = np.linspace(450, 850, 100)

plt.plot(xplot, cubic_poly(xplot, params[0], params[1], params[2], params[3]), zorder=1, label="Curvefit")
plt.plot(xplot, cubic_poly(xplot, 6.26e-8, -0.000117, 0.074, -15.04), zorder=1, label="Paper Curvefit")
plt.scatter(data[:, 0], data[:, 1], s=6, color="black", zorder=2, label="EDB data")
plt.grid("on", zorder=0)
plt.legend()
plt.show()
